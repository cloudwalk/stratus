name: Cargo Vet

on:
  pull_request:
    branches:
      - "*"
    paths-ignore:
      - ".github/workflows/deploy.yml"
      - ".github/workflows/docs-release.yml"
      - ".github/workflows/outdated.yml"
      - ".github/workflows/comment-tag-report.yml"
      - ".github/workflows/pr-agent.yml"
      - ".github/workflows/build-binary.yml"
      - ".github/CODEOWNERS"
      - "config/**"
      - "README.md"
      - "LICENSE"
      - "CONTRIBUTING.md"
      - "utils/slack-notifiers/**"
  workflow_dispatch:
  push:
    branches:
      - "main"
    paths:
      - "Cargo.lock"
      - "Cargo.toml"

permissions:
  contents: write
  pull-requests: write

jobs:
  cargo-vet:
    name: Vet Dependencies
    runs-on: ubuntu-22.04
    env:
      CARGO_VET_VERSION: 0.10.0
      AUDITOR_NAME: codex
      AUDITOR_EMAIL: codex@cloudwalk.io
      COMMITTER_NAME: dependabot[bot]
      COMMITTER_EMAIL: 49699333+dependabot[bot]@users.noreply.github.com
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        persist-credentials: true

    - name: Set up Rust
      run: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain 1.88

    - uses: actions/cache@v4
      with:
        path: ${{ runner.tool_cache }}/cargo-vet
        key: cargo-vet-bin-${{ env.CARGO_VET_VERSION }}

    - name: Add the tool cache directory to the search path
      run: echo "${{ runner.tool_cache }}/cargo-vet/bin" >> $GITHUB_PATH

    - name: Ensure that the tool cache is populated with the cargo-vet binary
      run: cargo install --root ${{ runner.tool_cache }}/cargo-vet --version ${{ env.CARGO_VET_VERSION }} cargo-vet

    - name: Invoke cargo-vet
      id: vet
      run: |
        set -o pipefail
        tmp="$(mktemp)"
        if cargo vet 2>&1 | tee "$tmp"; then
          status=0
        else
          status=$?
        fi
        {
          echo "log<<EOF"
          cat "$tmp"
          echo "EOF"
          echo "exit_code=$status"
        } >>"$GITHUB_OUTPUT"
        rm -f "$tmp"
        exit 0

    - name: Fetch base branch for Codex
      if: ${{ github.event_name == 'pull_request' }}
      run: git fetch origin ${{ github.base_ref }}

    - name: Decide whether Codex should run
      id: codex_guard
      if: ${{ github.event_name == 'pull_request' }}
      env:
        VET_EXIT_CODE: ${{ steps.vet.outputs.exit_code }}
        HEAD_REF: ${{ github.head_ref }}
      run: |
        if [ "${VET_EXIT_CODE:-1}" != "0" ]; then
          echo "run=true" >>"$GITHUB_OUTPUT"
        else
          echo "run=false" >>"$GITHUB_OUTPUT"
        fi

    - name: Codex auto-certify crate bump
      id: codex
      if: ${{ steps.codex_guard.outputs.run == 'true' }}
      uses: openai/codex-action@v1
      env:
        AUDITOR_NAME: ${{ env.AUDITOR_NAME }}
        AUDITOR_EMAIL: ${{ env.AUDITOR_EMAIL }}
        BASE_REF: ${{ github.base_ref }}
        HEAD_BRANCH: ${{ github.head_ref }}
        COMMITTER_NAME: ${{ env.COMMITTER_NAME }}
        COMMITTER_EMAIL: ${{ env.COMMITTER_EMAIL }}
        PR_NUMBER: ${{ github.event.pull_request.number }}
        GH_TOKEN: ${{ github.token }}
        GITHUB_TOKEN: ${{ github.token }}
      with:
        openai-api-key: ${{ secrets.OPENAI_KEY }}
        sandbox: danger-full-access 
        prompt: |
          You are Codex, the supply-chain auditor for the Stratus repository. A contributor opened this PR and cargo-vet currently fails because new crate versions are missing review.

          Context
          -------
          Repository: ${{ github.repository }}
          Base branch: origin/${{ github.base_ref }}
          Head branch: ${{ github.head_ref }}
          Auditor identity: ${{ env.AUDITOR_NAME }} <${{ env.AUDITOR_EMAIL }}>
          author: ${{ env.COMMITTER_NAME }} <${{ env.COMMITTER_EMAIL }}>
          committer: ${{ env.COMMITTER_NAME }} <${{ env.COMMITTER_EMAIL }}>

          Environment setup
          -----------------
          - Work from the repository root.
          - Verify the Rust toolchain is available (`rustup --version`). If not, install it with `curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain 1.88`, then run `source "$HOME/.cargo/env"` (or add `$HOME/.cargo/bin` to PATH).
          - Confirm `cargo vet` is installed (`cargo vet --version`). If missing, run `cargo install --version ${{ env.CARGO_VET_VERSION }} cargo-vet`.

          Certification tasks
          -------------------
          1. The latest base branch data (origin/${{ github.base_ref }}) has already been fetched for you. Work against that local ref; if you ever need to refetch and the network blocks it, report the failure instead of guessing.
          2. Review the captured report in "Latest cargo vet output" below to identify failing crates and recommended commands. Do not re-run `cargo vet`; rely on the recorded output. 
          3. Extract the recommended commands from that report; there is no need to run `cargo vet --output-format json`.
          4. For each recommended diff, run `cargo vet diff --locked --mode local <crate> <from> <to>` and review the diff output. If a required crate download is missing and cannot be fetched, explain the limitation and stop.
          5. If the reports highlight publishers to trust (for example via `NOTE:` lines) and you want to record that trust **instead of** adding audits, run the suggested command before you certify anything:
               `cargo vet trust --locked <crate-or-flag> <publisher> --criteria safe-to-deploy --notes "<short rationale>"`
             Skip this step once you have already certified all diffs; the trust command will exit with an error when there are no failing packages left.
          6. When satisfied the upgrade meets `safe-to-deploy`, execute:
               `cargo vet certify <crate> <from> <to> --criteria safe-to-deploy --accept-all --who "${{ env.AUDITOR_NAME }} <${{ env.AUDITOR_EMAIL }}>" --notes "<short summary>"`
             Include a concise `--notes` summary (<= 200 characters) describing the review.
          7. You may also run `cargo vet prune` to remove any unnecessary exemptions.
          8. Configure git with `${{ env.COMMITTER_NAME }}` / `${{ env.COMMITTER_EMAIL }}` (set `user.name` and `user.email`), commit any changes under `supply-chain/` using message `chore(vet): auto-certify dependabot bump`, and push directly back to `${{ github.head_ref }}`.

          Latest cargo vet output
          -----------------------
          ${{ steps.vet.outputs.log }}

          Guardrails
          ----------
          - Work from the repository root; do not touch unrelated files.
          - Abort and report clearly if any certification or trust decision is uncertain.
          - Finish with a brief summary of actions (or failure reason) in your final message.
          - You have no network access; do not attempt to reach the internet.
