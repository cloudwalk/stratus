name: Coverage Deploy

on:
  schedule:
    - cron: "0 0 * * SAT"
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  coverage-matrix:
    runs-on: ubuntu-22.04
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        group: [unit, inmemory, rocksdb, leader-follower, admin-password, rpc-downloader, importer-offline]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Rust
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain 1.84

      - name: Install libsasl2-dev libssl-dev
        run: sudo apt-get update && sudo apt install -y build-essential pkg-config libssl-dev libsasl2-dev

      - name: Set up Just
        uses: extractions/setup-just@v2

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: .tool-versions

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        id: cache-cargo
        with:
          prefix-key: ${{ runner.os }}-v3-cargo
          shared-key: stable-release
          key: ${{ hashFiles('Cargo.lock', 'Cargo.toml') }}
          cache-provider: "github"
          cache-directories: "~/.cargo/bin/"

      - name: Set up dependencies
        if: ${{ steps.cache-cargo.outputs.cache-hit != 'true' }}
        run: |
          cargo install killport || true
          cargo install wait-service || true

      - name: Install Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install Poetry
        run: curl -sSL https://install.python-poetry.org | python3 -

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - uses: taiki-e/install-action@v2
        with:
          tool: cargo-llvm-cov@0.6.14

      - name: Generate coverage for ${{ matrix.group }}
        run: |
          mkdir -p target/llvm-cov/codecov
          just stratus-test-coverage-group ${{ matrix.group }} "--codecov --output-path target/llvm-cov/codecov/${{ matrix.group }}.json"
          echo "Listing coverage directory contents:"
          ls -la target/llvm-cov/codecov/

      - name: Upload coverage report artifact
        uses: actions/upload-artifact@v4
        with:
            name: coverage-${{ matrix.group }}
            path: target/llvm-cov/codecov/
            retention-days: 90

      - name: Upload coverage report to Codecov
        uses: codecov/codecov-action@v5
        with:
          directory: target/llvm-cov/codecov
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: ${{ matrix.group }}
          name: ${{ matrix.group }}
