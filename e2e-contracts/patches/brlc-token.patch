diff --git a/test/base/CWToken.complex.test.ts b/test/base/CWToken.complex.test.ts
index 2e65c20..8dcf54a 100644
--- a/test/base/CWToken.complex.test.ts
+++ b/test/base/CWToken.complex.test.ts
@@ -49,6 +49,21 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
     return { token };
   }
 
+  async function latest(): Promise<number> {
+    return parseInt((await ethers.provider.send("eth_getBlockByNumber", ["latest", false])).timestamp, 16);
+  }
+
+  async function increaseTo(target: number) {
+    // Sends a RPC request to the blockchain.
+    if (network.name === "hardhat") {
+      // A virtual wait through network time shifting
+      await time.increaseTo(target);
+    } else if (network.name === "stratus") {
+      await ethers.provider.send("evm_setNextBlockTimestamp", [target]);
+      await ethers.provider.send("evm_mine", []);
+    }
+  }
+
   async function deployAndConfigureToken(): Promise<{ token: Contract }> {
     const { token } = await deployToken();
     await proveTx(token.connect(deployer).setMainBlocklister(deployer.address));
@@ -72,7 +87,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
       };
     }
   ) {
-    const timestamp = (await time.latest()) + 100;
+    const timestamp = (await latest()) + 100;
     const { token, amounts } = props;
     if (amounts.mint > 0) {
       await proveTx(token.connect(deployer).mint(user.address, amounts.mint));
@@ -277,15 +292,15 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
 
   describe("Frozen and premint balances", async () => {
     let timestamp: number;
-    before(async () => {
-      timestamp = (await time.latest()) + 100;
+    beforeEach(async () => {
+      timestamp = (await latest()) + 100;
     });
     it("Transfer to purpose account - test 5 with release awaiting", async () => {
       const { token } = await setUpFixture(deployAndConfigureToken);
       await proveTx(token.connect(deployer).mint(user.address, 10));
       await proveTx(token.connect(deployer).premint(user.address, 10, timestamp, PremintRestriction.None));
       await proveTx(token.connect(deployer).freeze(user.address, 10));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(purposeAccount.address, 5)
       ).to.changeTokenBalances(
@@ -300,7 +315,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
       await proveTx(token.connect(deployer).mint(user.address, 10));
       await proveTx(token.connect(deployer).premint(user.address, 10, timestamp, PremintRestriction.None));
       await proveTx(token.connect(deployer).freeze(user.address, 10));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(purposeAccount.address, 10)
       ).to.changeTokenBalances(
@@ -315,7 +330,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
       await proveTx(token.connect(deployer).mint(user.address, 10));
       await proveTx(token.connect(deployer).premint(user.address, 10, timestamp, PremintRestriction.None));
       await proveTx(token.connect(deployer).freeze(user.address, 10));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(purposeAccount.address, 15)
       ).to.be.revertedWithCustomError(token, REVERT_ERROR_TRANSFER_EXCEEDED_FROZEN_AMOUNT);
@@ -326,7 +341,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
       await proveTx(token.connect(deployer).mint(user.address, 10));
       await proveTx(token.connect(deployer).premint(user.address, 10, timestamp, PremintRestriction.None));
       await proveTx(token.connect(deployer).freeze(user.address, 10));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(purposeAccount.address, 20)
       ).to.be.revertedWithCustomError(token, REVERT_ERROR_TRANSFER_EXCEEDED_FROZEN_AMOUNT);
@@ -337,7 +352,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
       await proveTx(token.connect(deployer).mint(user.address, 10));
       await proveTx(token.connect(deployer).premint(user.address, 10, timestamp, PremintRestriction.None));
       await proveTx(token.connect(deployer).freeze(user.address, 10));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(purposeAccount.address, 25)
       ).to.be.revertedWith(REVERT_MESSAGE_ERC20_TRANSFER_AMOUNT_EXCEEDS_BALANCE);
@@ -348,7 +363,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
       await proveTx(token.connect(deployer).mint(user.address, 10));
       await proveTx(token.connect(deployer).premint(user.address, 10, timestamp, PremintRestriction.None));
       await proveTx(token.connect(deployer).freeze(user.address, 10));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(nonPurposeAccount.address, 5)
       ).to.changeTokenBalances(
@@ -363,7 +378,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
       await proveTx(token.connect(deployer).mint(user.address, 10));
       await proveTx(token.connect(deployer).premint(user.address, 10, timestamp, PremintRestriction.None));
       await proveTx(token.connect(deployer).freeze(user.address, 10));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(nonPurposeAccount.address, 10)
       ).to.changeTokenBalances(
@@ -378,7 +393,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
       await proveTx(token.connect(deployer).mint(user.address, 10));
       await proveTx(token.connect(deployer).premint(user.address, 10, timestamp, PremintRestriction.None));
       await proveTx(token.connect(deployer).freeze(user.address, 10));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(nonPurposeAccount.address, 15)
       ).to.be.revertedWithCustomError(token, REVERT_ERROR_TRANSFER_EXCEEDED_FROZEN_AMOUNT);
@@ -389,7 +404,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
       await proveTx(token.connect(deployer).mint(user.address, 10));
       await proveTx(token.connect(deployer).premint(user.address, 10, timestamp, PremintRestriction.None));
       await proveTx(token.connect(deployer).freeze(user.address, 10));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(nonPurposeAccount.address, 20)
       ).to.be.revertedWithCustomError(token, REVERT_ERROR_TRANSFER_EXCEEDED_FROZEN_AMOUNT);
@@ -400,7 +415,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
       await proveTx(token.connect(deployer).mint(user.address, 10));
       await proveTx(token.connect(deployer).premint(user.address, 10, timestamp, PremintRestriction.None));
       await proveTx(token.connect(deployer).freeze(user.address, 10));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(nonPurposeAccount.address, 25)
       ).to.be.revertedWith(REVERT_MESSAGE_ERC20_TRANSFER_AMOUNT_EXCEEDS_BALANCE);
@@ -509,15 +524,15 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
 
   describe("Premint and restricted balances", async () => {
     let timestamp: number;
-    before(async () => {
-      timestamp = (await time.latest()) + 100;
+    beforeEach(async () => {
+      timestamp = (await latest()) + 100;
     });
     it("Transfer to purpose account - test 5 with release awaiting", async () => {
       const { token } = await setUpFixture(deployAndConfigureToken);
       await proveTx(token.connect(deployer).mint(user.address, 10));
       await proveTx(token.connect(deployer).premint(user.address, 10, timestamp, PremintRestriction.None));
       await proveTx(token.connect(deployer).updateRestriction(user.address, PURPOSE, 10));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(purposeAccount.address, 5)
       ).to.changeTokenBalances(
@@ -533,7 +548,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
       await proveTx(token.connect(deployer).mint(user.address, 10));
       await proveTx(token.connect(deployer).premint(user.address, 10, timestamp, PremintRestriction.None));
       await proveTx(token.connect(deployer).updateRestriction(user.address, PURPOSE, 10));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(purposeAccount.address, 10)
       ).to.changeTokenBalances(
@@ -549,7 +564,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
       await proveTx(token.connect(deployer).mint(user.address, 10));
       await proveTx(token.connect(deployer).premint(user.address, 10, timestamp, PremintRestriction.None));
       await proveTx(token.connect(deployer).updateRestriction(user.address, PURPOSE, 10));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(purposeAccount.address, 15)
       ).to.changeTokenBalances(
@@ -565,7 +580,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
       await proveTx(token.connect(deployer).mint(user.address, 10));
       await proveTx(token.connect(deployer).premint(user.address, 10, timestamp, PremintRestriction.None));
       await proveTx(token.connect(deployer).updateRestriction(user.address, PURPOSE, 10));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(purposeAccount.address, 20)
       ).to.changeTokenBalances(
@@ -581,7 +596,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
       await proveTx(token.connect(deployer).mint(user.address, 10));
       await proveTx(token.connect(deployer).premint(user.address, 10, timestamp, PremintRestriction.None));
       await proveTx(token.connect(deployer).updateRestriction(user.address, PURPOSE, 10));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(purposeAccount.address, 25)
       ).to.be.revertedWith(REVERT_MESSAGE_ERC20_TRANSFER_AMOUNT_EXCEEDS_BALANCE);
@@ -593,7 +608,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
       await proveTx(token.connect(deployer).mint(user.address, 10));
       await proveTx(token.connect(deployer).premint(user.address, 10, timestamp, PremintRestriction.None));
       await proveTx(token.connect(deployer).updateRestriction(user.address, PURPOSE, 10));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(nonPurposeAccount.address, 5)
       ).to.changeTokenBalances(
@@ -609,7 +624,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
       await proveTx(token.connect(deployer).mint(user.address, 10));
       await proveTx(token.connect(deployer).premint(user.address, 10, timestamp, PremintRestriction.None));
       await proveTx(token.connect(deployer).updateRestriction(user.address, PURPOSE, 10));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(nonPurposeAccount.address, 10)
       ).to.changeTokenBalances(
@@ -625,7 +640,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
       await proveTx(token.connect(deployer).mint(user.address, 10));
       await proveTx(token.connect(deployer).premint(user.address, 10, timestamp, PremintRestriction.None));
       await proveTx(token.connect(deployer).updateRestriction(user.address, PURPOSE, 10));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(nonPurposeAccount.address, 15)
       ).to.be.revertedWithCustomError(token, REVERT_ERROR_TRANSFER_EXCEEDED_RESTRICTED_AMOUNT);
@@ -636,7 +651,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
       await proveTx(token.connect(deployer).mint(user.address, 10));
       await proveTx(token.connect(deployer).premint(user.address, 10, timestamp, PremintRestriction.None));
       await proveTx(token.connect(deployer).updateRestriction(user.address, PURPOSE, 10));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(nonPurposeAccount.address, 20)
       ).to.be.revertedWithCustomError(token, REVERT_ERROR_TRANSFER_EXCEEDED_RESTRICTED_AMOUNT);
@@ -647,7 +662,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
       await proveTx(token.connect(deployer).mint(user.address, 10));
       await proveTx(token.connect(deployer).premint(user.address, 10, timestamp, PremintRestriction.None));
       await proveTx(token.connect(deployer).updateRestriction(user.address, PURPOSE, 10));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(nonPurposeAccount.address, 25)
       ).to.be.revertedWith(REVERT_MESSAGE_ERC20_TRANSFER_AMOUNT_EXCEEDS_BALANCE);
@@ -773,8 +788,8 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
 
   describe("Frozen, restricted and premint balances", async () => {
     let timestamp: number;
-    before(async () => {
-      timestamp = (await time.latest()) + 100;
+    beforeEach(async () => {
+      timestamp = (await latest()) + 100;
     });
     it("Transfer to purpose account - test 5 with release awaiting", async () => {
       const { token } = await setUpFixture(deployAndConfigureToken);
@@ -782,7 +797,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
       await proveTx(token.connect(deployer).premint(user.address, 5, timestamp, PremintRestriction.None));
       await proveTx(token.connect(deployer).freeze(user.address, 5));
       await proveTx(token.connect(deployer).updateRestriction(user.address, PURPOSE, 5));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(purposeAccount.address, 5)
       ).to.changeTokenBalances(
@@ -799,7 +814,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
       await proveTx(token.connect(deployer).premint(user.address, 5, timestamp, PremintRestriction.None));
       await proveTx(token.connect(deployer).freeze(user.address, 5));
       await proveTx(token.connect(deployer).updateRestriction(user.address, PURPOSE, 5));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(purposeAccount.address, 10)
       ).to.changeTokenBalances(
@@ -816,7 +831,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
       await proveTx(token.connect(deployer).premint(user.address, 5, timestamp, PremintRestriction.None));
       await proveTx(token.connect(deployer).freeze(user.address, 5));
       await proveTx(token.connect(deployer).updateRestriction(user.address, PURPOSE, 5));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(purposeAccount.address, 15)
       ).to.changeTokenBalances(
@@ -833,7 +848,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
       await proveTx(token.connect(deployer).premint(user.address, 5, timestamp, PremintRestriction.None));
       await proveTx(token.connect(deployer).freeze(user.address, 5));
       await proveTx(token.connect(deployer).updateRestriction(user.address, PURPOSE, 5));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(purposeAccount.address, 20)
       ).to.be.revertedWithCustomError(token, REVERT_ERROR_TRANSFER_EXCEEDED_FROZEN_AMOUNT);
@@ -845,7 +860,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
       await proveTx(token.connect(deployer).premint(user.address, 5, timestamp, PremintRestriction.None));
       await proveTx(token.connect(deployer).freeze(user.address, 5));
       await proveTx(token.connect(deployer).updateRestriction(user.address, PURPOSE, 5));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(purposeAccount.address, 25)
       ).to.be.revertedWith(REVERT_MESSAGE_ERC20_TRANSFER_AMOUNT_EXCEEDS_BALANCE);
@@ -857,7 +872,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
       await proveTx(token.connect(deployer).premint(user.address, 5, timestamp, PremintRestriction.None));
       await proveTx(token.connect(deployer).freeze(user.address, 5));
       await proveTx(token.connect(deployer).updateRestriction(user.address, PURPOSE, 5));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(nonPurposeAccount.address, 5)
       ).to.changeTokenBalances(
@@ -874,7 +889,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
       await proveTx(token.connect(deployer).premint(user.address, 5, timestamp, PremintRestriction.None));
       await proveTx(token.connect(deployer).freeze(user.address, 5));
       await proveTx(token.connect(deployer).updateRestriction(user.address, PURPOSE, 5));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(nonPurposeAccount.address, 10)
       ).to.changeTokenBalances(
@@ -891,7 +906,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
       await proveTx(token.connect(deployer).premint(user.address, 5, timestamp, PremintRestriction.None));
       await proveTx(token.connect(deployer).freeze(user.address, 5));
       await proveTx(token.connect(deployer).updateRestriction(user.address, PURPOSE, 5));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(nonPurposeAccount.address, 15)
       ).to.be.revertedWithCustomError(token, REVERT_ERROR_TRANSFER_EXCEEDED_RESTRICTED_AMOUNT);
@@ -903,7 +918,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
       await proveTx(token.connect(deployer).premint(user.address, 5, timestamp, PremintRestriction.None));
       await proveTx(token.connect(deployer).freeze(user.address, 5));
       await proveTx(token.connect(deployer).updateRestriction(user.address, PURPOSE, 5));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(nonPurposeAccount.address, 20)
       ).to.be.revertedWithCustomError(token, REVERT_ERROR_TRANSFER_EXCEEDED_FROZEN_AMOUNT);
@@ -915,7 +930,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
       await proveTx(token.connect(deployer).premint(user.address, 5, timestamp, PremintRestriction.None));
       await proveTx(token.connect(deployer).freeze(user.address, 5));
       await proveTx(token.connect(deployer).updateRestriction(user.address, PURPOSE, 5));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(nonPurposeAccount.address, 25)
       ).to.be.revertedWith(REVERT_MESSAGE_ERC20_TRANSFER_AMOUNT_EXCEEDS_BALANCE);
@@ -1303,13 +1318,13 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
 
   describe("Premint balance only, no frozen balance or restricted balance", async () => {
     let timestamp: number;
-    before(async () => {
-      timestamp = await time.latest() + 100;
+    beforeEach(async () => {
+      timestamp = await latest() + 100;
     });
     it("Transfer to purpose account with release awaiting - test 5", async () => {
       const { token } = await setUpFixture(deployAndConfigureToken);
       await proveTx(token.connect(deployer).premint(user.address, 20, timestamp, PremintRestriction.None));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(purposeAccount.address, 5)
       ).to.changeTokenBalances(
@@ -1322,7 +1337,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
     it("Transfer to purpose account with release awaiting - test 10", async () => {
       const { token } = await setUpFixture(deployAndConfigureToken);
       await proveTx(token.connect(deployer).premint(user.address, 20, timestamp, PremintRestriction.None));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(purposeAccount.address, 10)
       ).to.changeTokenBalances(
@@ -1335,7 +1350,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
     it("Transfer to purpose account with release awaiting - test 15", async () => {
       const { token } = await setUpFixture(deployAndConfigureToken);
       await proveTx(token.connect(deployer).premint(user.address, 20, timestamp, PremintRestriction.None));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(purposeAccount.address, 15)
       ).to.changeTokenBalances(
@@ -1348,7 +1363,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
     it("Transfer to purpose account with release awaiting - test 20", async () => {
       const { token } = await setUpFixture(deployAndConfigureToken);
       await proveTx(token.connect(deployer).premint(user.address, 20, timestamp, PremintRestriction.None));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(purposeAccount.address, 20)
       ).to.changeTokenBalances(
@@ -1361,7 +1376,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
     it("Transfer to purpose account with release awaiting - test 25", async () => {
       const { token } = await setUpFixture(deployAndConfigureToken);
       await proveTx(token.connect(deployer).premint(user.address, 20, timestamp, PremintRestriction.None));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(purposeAccount.address, 25)
       ).to.be.revertedWith(REVERT_MESSAGE_ERC20_TRANSFER_AMOUNT_EXCEEDS_BALANCE);
@@ -1370,7 +1385,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
     it("Transfer to non-purpose account with release awaiting - test 5", async () => {
       const { token } = await setUpFixture(deployAndConfigureToken);
       await proveTx(token.connect(deployer).premint(user.address, 20, timestamp, PremintRestriction.None));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(nonPurposeAccount.address, 5)
       ).to.changeTokenBalances(
@@ -1383,7 +1398,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
     it("Transfer to non-purpose account with release awaiting - test 10", async () => {
       const { token } = await setUpFixture(deployAndConfigureToken);
       await proveTx(token.connect(deployer).premint(user.address, 20, timestamp, PremintRestriction.None));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(nonPurposeAccount.address, 10)
       ).to.changeTokenBalances(
@@ -1396,7 +1411,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
     it("Transfer to non-purpose account with release awaiting - test 15", async () => {
       const { token } = await setUpFixture(deployAndConfigureToken);
       await proveTx(token.connect(deployer).premint(user.address, 20, timestamp, PremintRestriction.None));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(nonPurposeAccount.address, 15)
       ).to.changeTokenBalances(
@@ -1409,7 +1424,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
     it("Transfer to non-purpose account with release awaiting - test 20", async () => {
       const { token } = await setUpFixture(deployAndConfigureToken);
       await proveTx(token.connect(deployer).premint(user.address, 20, timestamp, PremintRestriction.None));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(nonPurposeAccount.address, 20)
       ).to.changeTokenBalances(
@@ -1422,7 +1437,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
     it("Transfer to non-purpose account with release awaiting - test 25", async () => {
       const { token } = await setUpFixture(deployAndConfigureToken);
       await proveTx(token.connect(deployer).premint(user.address, 20, timestamp, PremintRestriction.None));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(nonPurposeAccount.address, 25)
       ).to.be.revertedWith(REVERT_MESSAGE_ERC20_TRANSFER_AMOUNT_EXCEEDS_BALANCE);
