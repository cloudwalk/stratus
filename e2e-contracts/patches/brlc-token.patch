diff --git a/test/BRLCToken.complex.test.ts b/test/BRLCToken.complex.test.ts
index f5cbce5..053cfc5 100644
--- a/test/BRLCToken.complex.test.ts
+++ b/test/BRLCToken.complex.test.ts
@@ -54,6 +54,21 @@ describe("Contract 'BRLCToken' - Premintable, Freezable & Restrictable scenarios
     return { token };
   }
 
+  async function latest(): Promise<number> {
+    return parseInt((await ethers.provider.send("eth_getBlockByNumber", ["latest", false])).timestamp, 16);
+  }
+
+  async function increaseTo(target: number) {
+    // Sends a RPC request to the blockchain.
+    if (network.name === "hardhat") {
+      // A virtual wait through network time shifting
+      await time.increaseTo(target);
+    } else if (network.name === "stratus") {
+      await ethers.provider.send("evm_setNextBlockTimestamp", [`0x${target.toString(16)}`]);
+      await ethers.provider.send("evm_mine", []);
+    }
+  }
+
   describe("Frozen and restricted balances", async () => {
     it("Transfer to purpose account - test 5", async () => {
       const { token } = await setUpFixture(deployAndConfigureToken);
@@ -168,15 +183,15 @@ describe("Contract 'BRLCToken' - Premintable, Freezable & Restrictable scenarios
 
   describe("Frozen and premint balances", async () => {
     let timestamp: number;
-    before(async () => {
-      timestamp = (await time.latest()) + 100;
+    beforeEach(async () => {
+      timestamp = (await latest()) + 100;
     });
     it("Transfer to purpose account - test 5 with release awaiting", async () => {
       const { token } = await setUpFixture(deployAndConfigureToken);
       await proveTx(token.connect(deployer).mint(user.address, 10));
       await proveTx(token.connect(deployer).premint(user.address, 10, timestamp));
       await proveTx(token.connect(deployer).freeze(user.address, 10));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(purposeAccount.address, 5)
       ).to.changeTokenBalances(
@@ -191,7 +206,8 @@ describe("Contract 'BRLCToken' - Premintable, Freezable & Restrictable scenarios
       await proveTx(token.connect(deployer).mint(user.address, 10));
       await proveTx(token.connect(deployer).premint(user.address, 10, timestamp));
       await proveTx(token.connect(deployer).freeze(user.address, 10));
-      await time.increaseTo(timestamp);
+
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(purposeAccount.address, 10)
       ).to.changeTokenBalances(
@@ -201,12 +217,12 @@ describe("Contract 'BRLCToken' - Premintable, Freezable & Restrictable scenarios
       );
     });
 
-    it("Transfer to purpose account - test 15 with release awaiting", async () => {
+    it("Transfer to purpose account - test 15 with release awaiting ff", async () => {
       const { token } = await setUpFixture(deployAndConfigureToken);
       await proveTx(token.connect(deployer).mint(user.address, 10));
       await proveTx(token.connect(deployer).premint(user.address, 10, timestamp));
       await proveTx(token.connect(deployer).freeze(user.address, 10));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(purposeAccount.address, 15)
       ).to.be.revertedWithCustomError(token, REVERT_ERROR_TRANSFER_EXCEEDED_FROZEN_AMOUNT);
@@ -217,7 +233,7 @@ describe("Contract 'BRLCToken' - Premintable, Freezable & Restrictable scenarios
       await proveTx(token.connect(deployer).mint(user.address, 10));
       await proveTx(token.connect(deployer).premint(user.address, 10, timestamp));
       await proveTx(token.connect(deployer).freeze(user.address, 10));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(purposeAccount.address, 20)
       ).to.be.revertedWithCustomError(token, REVERT_ERROR_TRANSFER_EXCEEDED_FROZEN_AMOUNT);
@@ -228,7 +244,7 @@ describe("Contract 'BRLCToken' - Premintable, Freezable & Restrictable scenarios
       await proveTx(token.connect(deployer).mint(user.address, 10));
       await proveTx(token.connect(deployer).premint(user.address, 10, timestamp));
       await proveTx(token.connect(deployer).freeze(user.address, 10));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(purposeAccount.address, 25)
       ).to.be.revertedWith(REVERT_MESSAGE_ERC20_TRANSFER_AMOUNT_EXCEEDS_BALANCE);
@@ -239,7 +255,7 @@ describe("Contract 'BRLCToken' - Premintable, Freezable & Restrictable scenarios
       await proveTx(token.connect(deployer).mint(user.address, 10));
       await proveTx(token.connect(deployer).premint(user.address, 10, timestamp));
       await proveTx(token.connect(deployer).freeze(user.address, 10));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(nonPurposeAccount.address, 5)
       ).to.changeTokenBalances(
@@ -254,7 +270,7 @@ describe("Contract 'BRLCToken' - Premintable, Freezable & Restrictable scenarios
       await proveTx(token.connect(deployer).mint(user.address, 10));
       await proveTx(token.connect(deployer).premint(user.address, 10, timestamp));
       await proveTx(token.connect(deployer).freeze(user.address, 10));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(nonPurposeAccount.address, 10)
       ).to.changeTokenBalances(
@@ -269,7 +285,7 @@ describe("Contract 'BRLCToken' - Premintable, Freezable & Restrictable scenarios
       await proveTx(token.connect(deployer).mint(user.address, 10));
       await proveTx(token.connect(deployer).premint(user.address, 10, timestamp));
       await proveTx(token.connect(deployer).freeze(user.address, 10));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(nonPurposeAccount.address, 15)
       ).to.be.revertedWithCustomError(token, REVERT_ERROR_TRANSFER_EXCEEDED_FROZEN_AMOUNT);
@@ -280,7 +296,7 @@ describe("Contract 'BRLCToken' - Premintable, Freezable & Restrictable scenarios
       await proveTx(token.connect(deployer).mint(user.address, 10));
       await proveTx(token.connect(deployer).premint(user.address, 10, timestamp));
       await proveTx(token.connect(deployer).freeze(user.address, 10));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(nonPurposeAccount.address, 20)
       ).to.be.revertedWithCustomError(token, REVERT_ERROR_TRANSFER_EXCEEDED_FROZEN_AMOUNT);
@@ -291,7 +307,7 @@ describe("Contract 'BRLCToken' - Premintable, Freezable & Restrictable scenarios
       await proveTx(token.connect(deployer).mint(user.address, 10));
       await proveTx(token.connect(deployer).premint(user.address, 10, timestamp));
       await proveTx(token.connect(deployer).freeze(user.address, 10));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(nonPurposeAccount.address, 25)
       ).to.be.revertedWith(REVERT_MESSAGE_ERC20_TRANSFER_AMOUNT_EXCEEDS_BALANCE);
@@ -400,15 +416,15 @@ describe("Contract 'BRLCToken' - Premintable, Freezable & Restrictable scenarios
 
   describe("Premint and restricted balances", async () => {
     let timestamp: number;
-    before(async () => {
-      timestamp = (await time.latest()) + 100;
+    beforeEach(async () => {
+      timestamp = (await latest()) + 100;
     });
     it("Transfer to purpose account - test 5 with release awaiting", async () => {
       const { token } = await setUpFixture(deployAndConfigureToken);
       await proveTx(token.connect(deployer).mint(user.address, 10));
       await proveTx(token.connect(deployer).premint(user.address, 10, timestamp));
       await proveTx(token.connect(deployer).updateRestriction(user.address, PURPOSE, 10));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(purposeAccount.address, 5)
       ).to.changeTokenBalances(
@@ -424,7 +440,7 @@ describe("Contract 'BRLCToken' - Premintable, Freezable & Restrictable scenarios
       await proveTx(token.connect(deployer).mint(user.address, 10));
       await proveTx(token.connect(deployer).premint(user.address, 10, timestamp));
       await proveTx(token.connect(deployer).updateRestriction(user.address, PURPOSE, 10));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(purposeAccount.address, 10)
       ).to.changeTokenBalances(
@@ -440,7 +456,7 @@ describe("Contract 'BRLCToken' - Premintable, Freezable & Restrictable scenarios
       await proveTx(token.connect(deployer).mint(user.address, 10));
       await proveTx(token.connect(deployer).premint(user.address, 10, timestamp));
       await proveTx(token.connect(deployer).updateRestriction(user.address, PURPOSE, 10));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(purposeAccount.address, 15)
       ).to.changeTokenBalances(
@@ -456,7 +472,7 @@ describe("Contract 'BRLCToken' - Premintable, Freezable & Restrictable scenarios
       await proveTx(token.connect(deployer).mint(user.address, 10));
       await proveTx(token.connect(deployer).premint(user.address, 10, timestamp));
       await proveTx(token.connect(deployer).updateRestriction(user.address, PURPOSE, 10));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(purposeAccount.address, 20)
       ).to.changeTokenBalances(
@@ -472,7 +488,7 @@ describe("Contract 'BRLCToken' - Premintable, Freezable & Restrictable scenarios
       await proveTx(token.connect(deployer).mint(user.address, 10));
       await proveTx(token.connect(deployer).premint(user.address, 10, timestamp));
       await proveTx(token.connect(deployer).updateRestriction(user.address, PURPOSE, 10));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(purposeAccount.address, 25)
       ).to.be.revertedWith(REVERT_MESSAGE_ERC20_TRANSFER_AMOUNT_EXCEEDS_BALANCE);
@@ -484,7 +500,7 @@ describe("Contract 'BRLCToken' - Premintable, Freezable & Restrictable scenarios
       await proveTx(token.connect(deployer).mint(user.address, 10));
       await proveTx(token.connect(deployer).premint(user.address, 10, timestamp));
       await proveTx(token.connect(deployer).updateRestriction(user.address, PURPOSE, 10));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(nonPurposeAccount.address, 5)
       ).to.changeTokenBalances(
@@ -500,7 +516,7 @@ describe("Contract 'BRLCToken' - Premintable, Freezable & Restrictable scenarios
       await proveTx(token.connect(deployer).mint(user.address, 10));
       await proveTx(token.connect(deployer).premint(user.address, 10, timestamp));
       await proveTx(token.connect(deployer).updateRestriction(user.address, PURPOSE, 10));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(nonPurposeAccount.address, 10)
       ).to.changeTokenBalances(
@@ -516,7 +532,7 @@ describe("Contract 'BRLCToken' - Premintable, Freezable & Restrictable scenarios
       await proveTx(token.connect(deployer).mint(user.address, 10));
       await proveTx(token.connect(deployer).premint(user.address, 10, timestamp));
       await proveTx(token.connect(deployer).updateRestriction(user.address, PURPOSE, 10));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(nonPurposeAccount.address, 15)
       ).to.be.revertedWithCustomError(token, REVERT_ERROR_TRANSFER_EXCEEDED_RESTRICTED_AMOUNT);
@@ -527,7 +543,7 @@ describe("Contract 'BRLCToken' - Premintable, Freezable & Restrictable scenarios
       await proveTx(token.connect(deployer).mint(user.address, 10));
       await proveTx(token.connect(deployer).premint(user.address, 10, timestamp));
       await proveTx(token.connect(deployer).updateRestriction(user.address, PURPOSE, 10));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(nonPurposeAccount.address, 20)
       ).to.be.revertedWithCustomError(token, REVERT_ERROR_TRANSFER_EXCEEDED_RESTRICTED_AMOUNT);
@@ -538,7 +554,7 @@ describe("Contract 'BRLCToken' - Premintable, Freezable & Restrictable scenarios
       await proveTx(token.connect(deployer).mint(user.address, 10));
       await proveTx(token.connect(deployer).premint(user.address, 10, timestamp));
       await proveTx(token.connect(deployer).updateRestriction(user.address, PURPOSE, 10));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(nonPurposeAccount.address, 25)
       ).to.be.revertedWith(REVERT_MESSAGE_ERC20_TRANSFER_AMOUNT_EXCEEDS_BALANCE);
@@ -664,8 +680,8 @@ describe("Contract 'BRLCToken' - Premintable, Freezable & Restrictable scenarios
 
   describe("Frozen, restricted and premint balances", async () => {
     let timestamp: number;
-    before(async () => {
-      timestamp = (await time.latest()) + 100;
+    beforeEach(async () => {
+      timestamp = (await latest()) + 100;
     });
     it("Transfer to purpose account - test 5 with release awaiting", async () => {
       const { token } = await setUpFixture(deployAndConfigureToken);
@@ -673,7 +689,7 @@ describe("Contract 'BRLCToken' - Premintable, Freezable & Restrictable scenarios
       await proveTx(token.connect(deployer).premint(user.address, 5, timestamp));
       await proveTx(token.connect(deployer).freeze(user.address, 5));
       await proveTx(token.connect(deployer).updateRestriction(user.address, PURPOSE, 5));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(purposeAccount.address, 5)
       ).to.changeTokenBalances(
@@ -690,7 +706,7 @@ describe("Contract 'BRLCToken' - Premintable, Freezable & Restrictable scenarios
       await proveTx(token.connect(deployer).premint(user.address, 5, timestamp));
       await proveTx(token.connect(deployer).freeze(user.address, 5));
       await proveTx(token.connect(deployer).updateRestriction(user.address, PURPOSE, 5));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(purposeAccount.address, 10)
       ).to.changeTokenBalances(
@@ -707,7 +723,7 @@ describe("Contract 'BRLCToken' - Premintable, Freezable & Restrictable scenarios
       await proveTx(token.connect(deployer).premint(user.address, 5, timestamp));
       await proveTx(token.connect(deployer).freeze(user.address, 5));
       await proveTx(token.connect(deployer).updateRestriction(user.address, PURPOSE, 5));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(purposeAccount.address, 15)
       ).to.changeTokenBalances(
@@ -724,7 +740,7 @@ describe("Contract 'BRLCToken' - Premintable, Freezable & Restrictable scenarios
       await proveTx(token.connect(deployer).premint(user.address, 5, timestamp));
       await proveTx(token.connect(deployer).freeze(user.address, 5));
       await proveTx(token.connect(deployer).updateRestriction(user.address, PURPOSE, 5));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(purposeAccount.address, 20)
       ).to.be.revertedWithCustomError(token, REVERT_ERROR_TRANSFER_EXCEEDED_FROZEN_AMOUNT);
@@ -736,7 +752,7 @@ describe("Contract 'BRLCToken' - Premintable, Freezable & Restrictable scenarios
       await proveTx(token.connect(deployer).premint(user.address, 5, timestamp));
       await proveTx(token.connect(deployer).freeze(user.address, 5));
       await proveTx(token.connect(deployer).updateRestriction(user.address, PURPOSE, 5));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(purposeAccount.address, 25)
       ).to.be.revertedWith(REVERT_MESSAGE_ERC20_TRANSFER_AMOUNT_EXCEEDS_BALANCE);
@@ -748,7 +764,7 @@ describe("Contract 'BRLCToken' - Premintable, Freezable & Restrictable scenarios
       await proveTx(token.connect(deployer).premint(user.address, 5, timestamp));
       await proveTx(token.connect(deployer).freeze(user.address, 5));
       await proveTx(token.connect(deployer).updateRestriction(user.address, PURPOSE, 5));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(nonPurposeAccount.address, 5)
       ).to.changeTokenBalances(
@@ -765,7 +781,7 @@ describe("Contract 'BRLCToken' - Premintable, Freezable & Restrictable scenarios
       await proveTx(token.connect(deployer).premint(user.address, 5, timestamp));
       await proveTx(token.connect(deployer).freeze(user.address, 5));
       await proveTx(token.connect(deployer).updateRestriction(user.address, PURPOSE, 5));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(nonPurposeAccount.address, 10)
       ).to.changeTokenBalances(
@@ -782,7 +798,7 @@ describe("Contract 'BRLCToken' - Premintable, Freezable & Restrictable scenarios
       await proveTx(token.connect(deployer).premint(user.address, 5, timestamp));
       await proveTx(token.connect(deployer).freeze(user.address, 5));
       await proveTx(token.connect(deployer).updateRestriction(user.address, PURPOSE, 5));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(nonPurposeAccount.address, 15)
       ).to.be.revertedWithCustomError(token, REVERT_ERROR_TRANSFER_EXCEEDED_RESTRICTED_AMOUNT);
@@ -794,7 +810,7 @@ describe("Contract 'BRLCToken' - Premintable, Freezable & Restrictable scenarios
       await proveTx(token.connect(deployer).premint(user.address, 5, timestamp));
       await proveTx(token.connect(deployer).freeze(user.address, 5));
       await proveTx(token.connect(deployer).updateRestriction(user.address, PURPOSE, 5));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(nonPurposeAccount.address, 20)
       ).to.be.revertedWithCustomError(token, REVERT_ERROR_TRANSFER_EXCEEDED_FROZEN_AMOUNT);
@@ -806,7 +822,7 @@ describe("Contract 'BRLCToken' - Premintable, Freezable & Restrictable scenarios
       await proveTx(token.connect(deployer).premint(user.address, 5, timestamp));
       await proveTx(token.connect(deployer).freeze(user.address, 5));
       await proveTx(token.connect(deployer).updateRestriction(user.address, PURPOSE, 5));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(nonPurposeAccount.address, 25)
       ).to.be.revertedWith(REVERT_MESSAGE_ERC20_TRANSFER_AMOUNT_EXCEEDS_BALANCE);
@@ -1194,13 +1210,13 @@ describe("Contract 'BRLCToken' - Premintable, Freezable & Restrictable scenarios
 
   describe("Premint balance only, no frozen balance or restricted balance", async () => {
     let timestamp: number;
-    before(async () => {
-      timestamp = await time.latest() + 100;
+    beforeEach(async () => {
+      timestamp = await latest() + 100;
     });
     it("Transfer to purpose account with release awaiting - test 5", async () => {
       const { token } = await setUpFixture(deployAndConfigureToken);
       await proveTx(token.connect(deployer).premint(user.address, 20, timestamp));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(purposeAccount.address, 5)
       ).to.changeTokenBalances(
@@ -1213,7 +1229,7 @@ describe("Contract 'BRLCToken' - Premintable, Freezable & Restrictable scenarios
     it("Transfer to purpose account with release awaiting - test 10", async () => {
       const { token } = await setUpFixture(deployAndConfigureToken);
       await proveTx(token.connect(deployer).premint(user.address, 20, timestamp));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(purposeAccount.address, 10)
       ).to.changeTokenBalances(
@@ -1226,7 +1242,7 @@ describe("Contract 'BRLCToken' - Premintable, Freezable & Restrictable scenarios
     it("Transfer to purpose account with release awaiting - test 15", async () => {
       const { token } = await setUpFixture(deployAndConfigureToken);
       await proveTx(token.connect(deployer).premint(user.address, 20, timestamp));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(purposeAccount.address, 15)
       ).to.changeTokenBalances(
@@ -1239,7 +1255,7 @@ describe("Contract 'BRLCToken' - Premintable, Freezable & Restrictable scenarios
     it("Transfer to purpose account with release awaiting - test 20", async () => {
       const { token } = await setUpFixture(deployAndConfigureToken);
       await proveTx(token.connect(deployer).premint(user.address, 20, timestamp));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(purposeAccount.address, 20)
       ).to.changeTokenBalances(
@@ -1252,7 +1268,7 @@ describe("Contract 'BRLCToken' - Premintable, Freezable & Restrictable scenarios
     it("Transfer to purpose account with release awaiting - test 25", async () => {
       const { token } = await setUpFixture(deployAndConfigureToken);
       await proveTx(token.connect(deployer).premint(user.address, 20, timestamp));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(purposeAccount.address, 25)
       ).to.be.revertedWith(REVERT_MESSAGE_ERC20_TRANSFER_AMOUNT_EXCEEDS_BALANCE);
@@ -1261,7 +1277,7 @@ describe("Contract 'BRLCToken' - Premintable, Freezable & Restrictable scenarios
     it("Transfer to non-purpose account with release awaiting - test 5", async () => {
       const { token } = await setUpFixture(deployAndConfigureToken);
       await proveTx(token.connect(deployer).premint(user.address, 20, timestamp));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(nonPurposeAccount.address, 5)
       ).to.changeTokenBalances(
@@ -1274,7 +1290,7 @@ describe("Contract 'BRLCToken' - Premintable, Freezable & Restrictable scenarios
     it("Transfer to non-purpose account with release awaiting - test 10", async () => {
       const { token } = await setUpFixture(deployAndConfigureToken);
       await proveTx(token.connect(deployer).premint(user.address, 20, timestamp));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(nonPurposeAccount.address, 10)
       ).to.changeTokenBalances(
@@ -1287,7 +1303,7 @@ describe("Contract 'BRLCToken' - Premintable, Freezable & Restrictable scenarios
     it("Transfer to non-purpose account with release awaiting - test 15", async () => {
       const { token } = await setUpFixture(deployAndConfigureToken);
       await proveTx(token.connect(deployer).premint(user.address, 20, timestamp));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(nonPurposeAccount.address, 15)
       ).to.changeTokenBalances(
@@ -1300,7 +1316,7 @@ describe("Contract 'BRLCToken' - Premintable, Freezable & Restrictable scenarios
     it("Transfer to non-purpose account with release awaiting - test 20", async () => {
       const { token } = await setUpFixture(deployAndConfigureToken);
       await proveTx(token.connect(deployer).premint(user.address, 20, timestamp));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(nonPurposeAccount.address, 20)
       ).to.changeTokenBalances(
@@ -1313,7 +1329,7 @@ describe("Contract 'BRLCToken' - Premintable, Freezable & Restrictable scenarios
     it("Transfer to non-purpose account with release awaiting - test 25", async () => {
       const { token } = await setUpFixture(deployAndConfigureToken);
       await proveTx(token.connect(deployer).premint(user.address, 20, timestamp));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(nonPurposeAccount.address, 25)
       ).to.be.revertedWith(REVERT_MESSAGE_ERC20_TRANSFER_AMOUNT_EXCEEDS_BALANCE);
diff --git a/test/USJimToken.complex.test.ts b/test/USJimToken.complex.test.ts
index 1e44d6e..a1c40ab 100644
--- a/test/USJimToken.complex.test.ts
+++ b/test/USJimToken.complex.test.ts
@@ -49,17 +49,32 @@ describe("Contract 'USJimToken' - Premintable & Freezable scenarios", async () =
     return { token };
   }
 
+  async function latest(): Promise<number> {
+    return parseInt((await ethers.provider.send("eth_getBlockByNumber", ["latest", false])).timestamp, 16);
+  }
+
+  async function increaseTo(target: number) {
+    // Sends a RPC request to the blockchain.
+    if (network.name === "hardhat") {
+      // A virtual wait through network time shifting
+      await time.increaseTo(target);
+    } else if (network.name === "stratus") {
+      await ethers.provider.send("evm_setNextBlockTimestamp", [`0x${target.toString(16)}`]);
+      await ethers.provider.send("evm_mine", []);
+    }
+  }
+
   describe("Frozen and premint balances", async () => {
     let timestamp: number;
-    before(async () => {
-      timestamp = (await time.latest()) + 100;
+    beforeEach(async () => {
+      timestamp = (await latest()) + 100;
     });
     it("Transfer - test 5 with release awaiting", async () => {
       const { token } = await setUpFixture(deployAndConfigureToken);
       await proveTx(token.connect(deployer).mint(user.address, 10));
       await proveTx(token.connect(deployer).premint(user.address, 10, timestamp));
       await proveTx(token.connect(deployer).freeze(user.address, 10));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(reciever.address, 5)
       ).to.changeTokenBalances(
@@ -74,7 +89,7 @@ describe("Contract 'USJimToken' - Premintable & Freezable scenarios", async () =
       await proveTx(token.connect(deployer).mint(user.address, 10));
       await proveTx(token.connect(deployer).premint(user.address, 10, timestamp));
       await proveTx(token.connect(deployer).freeze(user.address, 10));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(reciever.address, 10)
       ).to.changeTokenBalances(
@@ -89,7 +104,7 @@ describe("Contract 'USJimToken' - Premintable & Freezable scenarios", async () =
       await proveTx(token.connect(deployer).mint(user.address, 10));
       await proveTx(token.connect(deployer).premint(user.address, 10, timestamp));
       await proveTx(token.connect(deployer).freeze(user.address, 10));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(reciever.address, 15)
       ).to.be.revertedWithCustomError(token, REVERT_ERROR_TRANSFER_EXCEEDED_FROZEN_AMOUNT);
@@ -100,7 +115,7 @@ describe("Contract 'USJimToken' - Premintable & Freezable scenarios", async () =
       await proveTx(token.connect(deployer).mint(user.address, 10));
       await proveTx(token.connect(deployer).premint(user.address, 10, timestamp));
       await proveTx(token.connect(deployer).freeze(user.address, 10));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(reciever.address, 20)
       ).to.be.revertedWithCustomError(token, REVERT_ERROR_TRANSFER_EXCEEDED_FROZEN_AMOUNT);
@@ -111,7 +126,7 @@ describe("Contract 'USJimToken' - Premintable & Freezable scenarios", async () =
       await proveTx(token.connect(deployer).mint(user.address, 10));
       await proveTx(token.connect(deployer).premint(user.address, 10, timestamp));
       await proveTx(token.connect(deployer).freeze(user.address, 10));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(reciever.address, 25)
       ).to.be.revertedWith(REVERT_MESSAGE_ERC20_TRANSFER_AMOUNT_EXCEEDS_BALANCE);
@@ -235,13 +250,13 @@ describe("Contract 'USJimToken' - Premintable & Freezable scenarios", async () =
 
   describe("Premint balance only, no frozen balance", async () => {
     let timestamp: number;
-    before(async () => {
-      timestamp = (await time.latest()) + 100;
+    beforeEach(async () => {
+      timestamp = (await latest()) + 100;
     });
     it("Transfer - test 5 with release awaiting", async () => {
       const { token } = await setUpFixture(deployAndConfigureToken);
       await proveTx(token.connect(deployer).premint(user.address, 20, timestamp));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(reciever.address, 5)
       ).to.changeTokenBalances(
@@ -254,7 +269,7 @@ describe("Contract 'USJimToken' - Premintable & Freezable scenarios", async () =
     it("Transfer - test 10 with release awaiting", async () => {
       const { token } = await setUpFixture(deployAndConfigureToken);
       await proveTx(token.connect(deployer).premint(user.address, 20, timestamp));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(reciever.address, 10)
       ).to.changeTokenBalances(
@@ -267,7 +282,7 @@ describe("Contract 'USJimToken' - Premintable & Freezable scenarios", async () =
     it("Transfer - test 15 with release awaiting", async () => {
       const { token } = await setUpFixture(deployAndConfigureToken);
       await proveTx(token.connect(deployer).premint(user.address, 20, timestamp));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(reciever.address, 15)
       ).to.changeTokenBalances(
@@ -280,7 +295,7 @@ describe("Contract 'USJimToken' - Premintable & Freezable scenarios", async () =
     it("Transfer - test 20 with release awaiting", async () => {
       const { token } = await setUpFixture(deployAndConfigureToken);
       await proveTx(token.connect(deployer).premint(user.address, 20, timestamp));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(reciever.address, 20)
       ).to.changeTokenBalances(
@@ -293,7 +308,7 @@ describe("Contract 'USJimToken' - Premintable & Freezable scenarios", async () =
     it("Transfer - test 25 with release awaiting", async () => {
       const { token } = await setUpFixture(deployAndConfigureToken);
       await proveTx(token.connect(deployer).premint(user.address, 20, timestamp));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(reciever.address, 25)
       ).to.be.revertedWith(REVERT_MESSAGE_ERC20_TRANSFER_AMOUNT_EXCEEDS_BALANCE);
diff --git a/test/base/ERC20Mintable.test.ts b/test/base/ERC20Mintable.test.ts
index 8d1afc1..a196969 100644
--- a/test/base/ERC20Mintable.test.ts
+++ b/test/base/ERC20Mintable.test.ts
@@ -62,6 +62,21 @@ describe("Contract 'ERC20Mintable'", async () => {
     tokenFactory = await ethers.getContractFactory("ERC20MintableMock");
   });
 
+  async function latest(): Promise<number> {
+    return parseInt((await ethers.provider.send("eth_getBlockByNumber", ["latest", false])).timestamp, 16);
+  }
+
+  async function increaseTo(target: number) {
+    // Sends a RPC request to the blockchain.
+    if (network.name === "hardhat") {
+      // A virtual wait through network time shifting
+      await time.increaseTo(target);
+    } else if (network.name === "stratus") {
+      await ethers.provider.send("evm_setNextBlockTimestamp", [`0x${target.toString(16)}`]);
+      await ethers.provider.send("evm_mine", []);
+    }
+  }
+
   async function deployToken(): Promise<{ token: Contract }> {
     const token: Contract = await upgrades.deployProxy(tokenFactory, [TOKEN_NAME, TOKEN_SYMBOL]);
     await token.deployed();
@@ -334,8 +349,8 @@ describe("Contract 'ERC20Mintable'", async () => {
 
   describe("Function 'premint()'", async () => {
     let timestamp: number;
-    before(async () => {
-      timestamp = (await time.latest()) + 100;
+    beforeEach(async () => {
+      timestamp = (await latest()) + 100;
     });
 
     describe("Executes as expected and emits the correct events if", async () => {
@@ -383,7 +398,7 @@ describe("Contract 'ERC20Mintable'", async () => {
           await proveTx(token.connect(minter).premint(user.address, TOKEN_AMOUNT, timestamp + i * 10));
         }
         expect(await token.balanceOfPremint(user.address)).to.eq(TOKEN_AMOUNT * MAX_PENDING_PREMINTS_COUNT);
-        await time.increaseTo(timestamp + 1);
+        await increaseTo(timestamp + 1);
         expect(await token.balanceOfPremint(user.address)).to.eq(TOKEN_AMOUNT * (MAX_PENDING_PREMINTS_COUNT - 1));
         await proveTx(token.connect(minter).premint(user.address, TOKEN_AMOUNT + 1, timestamp * 2));
         expect(await token.balanceOfPremint(user.address)).to.eq(TOKEN_AMOUNT * MAX_PENDING_PREMINTS_COUNT + 1);
@@ -400,7 +415,7 @@ describe("Contract 'ERC20Mintable'", async () => {
 
       it("The premint's release time is passed", async () => {
         const { token } = await setUpFixture(deployAndConfigureToken);
-        const timestamp = (await time.latest()) - 1;
+        const timestamp = (await latest()) - 1;
         await expect(token.connect(minter).premint(user.address, TOKEN_AMOUNT, timestamp))
           .to.be.revertedWithCustomError(token, REVERT_ERROR_PREMINT_RELEASE_TIME_PASSED);
       });
@@ -491,17 +506,17 @@ describe("Contract 'ERC20Mintable'", async () => {
 
   describe("Function 'balanceOfPremint()'", async () => {
     it("Returns the correct balance of premint", async () => {
-      const timestamp = (await time.latest()) + 100;
+      const timestamp = (await latest()) + 100;
       const { token } = await setUpFixture(deployAndConfigureToken);
 
       await proveTx(token.connect(minter).premint(user.address, TOKEN_AMOUNT, timestamp));
       await proveTx(token.connect(minter).premint(user.address, TOKEN_AMOUNT + 1, timestamp + 50));
       expect(await token.balanceOfPremint(user.address)).to.eq(TOKEN_AMOUNT * 2 + 1);
 
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       expect(await token.balanceOfPremint(user.address)).to.eq(TOKEN_AMOUNT + 1);
 
-      await time.increaseTo(timestamp + 50);
+      await increaseTo(timestamp + 50);
       expect(await token.balanceOfPremint(user.address)).to.eq(0);
     });
   });
