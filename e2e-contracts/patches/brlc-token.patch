diff --git a/test/base/CWToken.complex.test.ts b/test/base/CWToken.complex.test.ts
index 267986e..1ce7e46 100644
--- a/test/base/CWToken.complex.test.ts
+++ b/test/base/CWToken.complex.test.ts
@@ -55,6 +55,21 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
     return { token };
   }
 
+  async function latest(): Promise<number> {
+    return parseInt((await ethers.provider.send("eth_getBlockByNumber", ["latest", false])).timestamp, 16);
+  }
+
+  async function increaseTo(target: number) {
+    // Sends a RPC request to the blockchain.
+    if (network.name === "hardhat") {
+      // A virtual wait through network time shifting
+      await time.increaseTo(target);
+    } else if (network.name === "stratus") {
+      await ethers.provider.send("evm_setNextBlockTimestamp", [target]);
+      await ethers.provider.send("evm_mine", []);
+    }
+  }
+
   async function checkComplexBalanceGetter(
     props: {
       token: Contract;
@@ -66,7 +81,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
       };
     }
   ) {
-    const timestamp = (await time.latest()) + 100;
+    const timestamp = (await latest()) + 100;
     const { token, amounts } = props;
     if (amounts.mint > 0) {
       await proveTx(token.connect(deployer).mint(user.address, amounts.mint));
@@ -272,14 +287,14 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
   describe("Frozen and premint balances", async () => {
     let timestamp: number;
     before(async () => {
-      timestamp = (await time.latest()) + 100;
+      timestamp = (await latest()) + 100;
     });
     it("Transfer to purpose account - test 5 with release awaiting", async () => {
       const { token } = await setUpFixture(deployAndConfigureToken);
       await proveTx(token.connect(deployer).mint(user.address, 10));
       await proveTx(token.connect(deployer).premint(user.address, 10, timestamp));
       await proveTx(token.connect(deployer).freeze(user.address, 10));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(purposeAccount.address, 5)
       ).to.changeTokenBalances(
@@ -294,7 +309,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
       await proveTx(token.connect(deployer).mint(user.address, 10));
       await proveTx(token.connect(deployer).premint(user.address, 10, timestamp));
       await proveTx(token.connect(deployer).freeze(user.address, 10));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(purposeAccount.address, 10)
       ).to.changeTokenBalances(
@@ -309,7 +324,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
       await proveTx(token.connect(deployer).mint(user.address, 10));
       await proveTx(token.connect(deployer).premint(user.address, 10, timestamp));
       await proveTx(token.connect(deployer).freeze(user.address, 10));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(purposeAccount.address, 15)
       ).to.be.revertedWithCustomError(token, REVERT_ERROR_TRANSFER_EXCEEDED_FROZEN_AMOUNT);
@@ -320,7 +335,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
       await proveTx(token.connect(deployer).mint(user.address, 10));
       await proveTx(token.connect(deployer).premint(user.address, 10, timestamp));
       await proveTx(token.connect(deployer).freeze(user.address, 10));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(purposeAccount.address, 20)
       ).to.be.revertedWithCustomError(token, REVERT_ERROR_TRANSFER_EXCEEDED_FROZEN_AMOUNT);
@@ -331,7 +346,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
       await proveTx(token.connect(deployer).mint(user.address, 10));
       await proveTx(token.connect(deployer).premint(user.address, 10, timestamp));
       await proveTx(token.connect(deployer).freeze(user.address, 10));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(purposeAccount.address, 25)
       ).to.be.revertedWith(REVERT_MESSAGE_ERC20_TRANSFER_AMOUNT_EXCEEDS_BALANCE);
@@ -342,7 +357,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
       await proveTx(token.connect(deployer).mint(user.address, 10));
       await proveTx(token.connect(deployer).premint(user.address, 10, timestamp));
       await proveTx(token.connect(deployer).freeze(user.address, 10));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(nonPurposeAccount.address, 5)
       ).to.changeTokenBalances(
@@ -357,7 +372,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
       await proveTx(token.connect(deployer).mint(user.address, 10));
       await proveTx(token.connect(deployer).premint(user.address, 10, timestamp));
       await proveTx(token.connect(deployer).freeze(user.address, 10));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(nonPurposeAccount.address, 10)
       ).to.changeTokenBalances(
@@ -372,7 +387,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
       await proveTx(token.connect(deployer).mint(user.address, 10));
       await proveTx(token.connect(deployer).premint(user.address, 10, timestamp));
       await proveTx(token.connect(deployer).freeze(user.address, 10));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(nonPurposeAccount.address, 15)
       ).to.be.revertedWithCustomError(token, REVERT_ERROR_TRANSFER_EXCEEDED_FROZEN_AMOUNT);
@@ -383,7 +398,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
       await proveTx(token.connect(deployer).mint(user.address, 10));
       await proveTx(token.connect(deployer).premint(user.address, 10, timestamp));
       await proveTx(token.connect(deployer).freeze(user.address, 10));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(nonPurposeAccount.address, 20)
       ).to.be.revertedWithCustomError(token, REVERT_ERROR_TRANSFER_EXCEEDED_FROZEN_AMOUNT);
@@ -394,7 +409,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
       await proveTx(token.connect(deployer).mint(user.address, 10));
       await proveTx(token.connect(deployer).premint(user.address, 10, timestamp));
       await proveTx(token.connect(deployer).freeze(user.address, 10));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(nonPurposeAccount.address, 25)
       ).to.be.revertedWith(REVERT_MESSAGE_ERC20_TRANSFER_AMOUNT_EXCEEDS_BALANCE);
@@ -504,14 +519,14 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
   describe("Premint and restricted balances", async () => {
     let timestamp: number;
     before(async () => {
-      timestamp = (await time.latest()) + 100;
+      timestamp = (await latest()) + 100;
     });
     it("Transfer to purpose account - test 5 with release awaiting", async () => {
       const { token } = await setUpFixture(deployAndConfigureToken);
       await proveTx(token.connect(deployer).mint(user.address, 10));
       await proveTx(token.connect(deployer).premint(user.address, 10, timestamp));
       await proveTx(token.connect(deployer).updateRestriction(user.address, PURPOSE, 10));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(purposeAccount.address, 5)
       ).to.changeTokenBalances(
@@ -527,7 +542,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
       await proveTx(token.connect(deployer).mint(user.address, 10));
       await proveTx(token.connect(deployer).premint(user.address, 10, timestamp));
       await proveTx(token.connect(deployer).updateRestriction(user.address, PURPOSE, 10));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(purposeAccount.address, 10)
       ).to.changeTokenBalances(
@@ -543,7 +558,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
       await proveTx(token.connect(deployer).mint(user.address, 10));
       await proveTx(token.connect(deployer).premint(user.address, 10, timestamp));
       await proveTx(token.connect(deployer).updateRestriction(user.address, PURPOSE, 10));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(purposeAccount.address, 15)
       ).to.changeTokenBalances(
@@ -559,7 +574,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
       await proveTx(token.connect(deployer).mint(user.address, 10));
       await proveTx(token.connect(deployer).premint(user.address, 10, timestamp));
       await proveTx(token.connect(deployer).updateRestriction(user.address, PURPOSE, 10));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(purposeAccount.address, 20)
       ).to.changeTokenBalances(
@@ -575,7 +590,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
       await proveTx(token.connect(deployer).mint(user.address, 10));
       await proveTx(token.connect(deployer).premint(user.address, 10, timestamp));
       await proveTx(token.connect(deployer).updateRestriction(user.address, PURPOSE, 10));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(purposeAccount.address, 25)
       ).to.be.revertedWith(REVERT_MESSAGE_ERC20_TRANSFER_AMOUNT_EXCEEDS_BALANCE);
@@ -587,7 +602,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
       await proveTx(token.connect(deployer).mint(user.address, 10));
       await proveTx(token.connect(deployer).premint(user.address, 10, timestamp));
       await proveTx(token.connect(deployer).updateRestriction(user.address, PURPOSE, 10));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(nonPurposeAccount.address, 5)
       ).to.changeTokenBalances(
@@ -603,7 +618,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
       await proveTx(token.connect(deployer).mint(user.address, 10));
       await proveTx(token.connect(deployer).premint(user.address, 10, timestamp));
       await proveTx(token.connect(deployer).updateRestriction(user.address, PURPOSE, 10));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(nonPurposeAccount.address, 10)
       ).to.changeTokenBalances(
@@ -619,7 +634,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
       await proveTx(token.connect(deployer).mint(user.address, 10));
       await proveTx(token.connect(deployer).premint(user.address, 10, timestamp));
       await proveTx(token.connect(deployer).updateRestriction(user.address, PURPOSE, 10));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(nonPurposeAccount.address, 15)
       ).to.be.revertedWithCustomError(token, REVERT_ERROR_TRANSFER_EXCEEDED_RESTRICTED_AMOUNT);
@@ -630,7 +645,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
       await proveTx(token.connect(deployer).mint(user.address, 10));
       await proveTx(token.connect(deployer).premint(user.address, 10, timestamp));
       await proveTx(token.connect(deployer).updateRestriction(user.address, PURPOSE, 10));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(nonPurposeAccount.address, 20)
       ).to.be.revertedWithCustomError(token, REVERT_ERROR_TRANSFER_EXCEEDED_RESTRICTED_AMOUNT);
@@ -641,7 +656,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
       await proveTx(token.connect(deployer).mint(user.address, 10));
       await proveTx(token.connect(deployer).premint(user.address, 10, timestamp));
       await proveTx(token.connect(deployer).updateRestriction(user.address, PURPOSE, 10));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(nonPurposeAccount.address, 25)
       ).to.be.revertedWith(REVERT_MESSAGE_ERC20_TRANSFER_AMOUNT_EXCEEDS_BALANCE);
@@ -768,7 +783,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
   describe("Frozen, restricted and premint balances", async () => {
     let timestamp: number;
     before(async () => {
-      timestamp = (await time.latest()) + 100;
+      timestamp = (await latest()) + 100;
     });
     it("Transfer to purpose account - test 5 with release awaiting", async () => {
       const { token } = await setUpFixture(deployAndConfigureToken);
@@ -776,7 +791,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
       await proveTx(token.connect(deployer).premint(user.address, 5, timestamp));
       await proveTx(token.connect(deployer).freeze(user.address, 5));
       await proveTx(token.connect(deployer).updateRestriction(user.address, PURPOSE, 5));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(purposeAccount.address, 5)
       ).to.changeTokenBalances(
@@ -793,7 +808,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
       await proveTx(token.connect(deployer).premint(user.address, 5, timestamp));
       await proveTx(token.connect(deployer).freeze(user.address, 5));
       await proveTx(token.connect(deployer).updateRestriction(user.address, PURPOSE, 5));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(purposeAccount.address, 10)
       ).to.changeTokenBalances(
@@ -810,7 +825,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
       await proveTx(token.connect(deployer).premint(user.address, 5, timestamp));
       await proveTx(token.connect(deployer).freeze(user.address, 5));
       await proveTx(token.connect(deployer).updateRestriction(user.address, PURPOSE, 5));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(purposeAccount.address, 15)
       ).to.changeTokenBalances(
@@ -827,7 +842,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
       await proveTx(token.connect(deployer).premint(user.address, 5, timestamp));
       await proveTx(token.connect(deployer).freeze(user.address, 5));
       await proveTx(token.connect(deployer).updateRestriction(user.address, PURPOSE, 5));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(purposeAccount.address, 20)
       ).to.be.revertedWithCustomError(token, REVERT_ERROR_TRANSFER_EXCEEDED_FROZEN_AMOUNT);
@@ -839,7 +854,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
       await proveTx(token.connect(deployer).premint(user.address, 5, timestamp));
       await proveTx(token.connect(deployer).freeze(user.address, 5));
       await proveTx(token.connect(deployer).updateRestriction(user.address, PURPOSE, 5));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(purposeAccount.address, 25)
       ).to.be.revertedWith(REVERT_MESSAGE_ERC20_TRANSFER_AMOUNT_EXCEEDS_BALANCE);
@@ -851,7 +866,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
       await proveTx(token.connect(deployer).premint(user.address, 5, timestamp));
       await proveTx(token.connect(deployer).freeze(user.address, 5));
       await proveTx(token.connect(deployer).updateRestriction(user.address, PURPOSE, 5));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(nonPurposeAccount.address, 5)
       ).to.changeTokenBalances(
@@ -868,7 +883,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
       await proveTx(token.connect(deployer).premint(user.address, 5, timestamp));
       await proveTx(token.connect(deployer).freeze(user.address, 5));
       await proveTx(token.connect(deployer).updateRestriction(user.address, PURPOSE, 5));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(nonPurposeAccount.address, 10)
       ).to.changeTokenBalances(
@@ -885,7 +900,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
       await proveTx(token.connect(deployer).premint(user.address, 5, timestamp));
       await proveTx(token.connect(deployer).freeze(user.address, 5));
       await proveTx(token.connect(deployer).updateRestriction(user.address, PURPOSE, 5));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(nonPurposeAccount.address, 15)
       ).to.be.revertedWithCustomError(token, REVERT_ERROR_TRANSFER_EXCEEDED_RESTRICTED_AMOUNT);
@@ -897,7 +912,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
       await proveTx(token.connect(deployer).premint(user.address, 5, timestamp));
       await proveTx(token.connect(deployer).freeze(user.address, 5));
       await proveTx(token.connect(deployer).updateRestriction(user.address, PURPOSE, 5));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(nonPurposeAccount.address, 20)
       ).to.be.revertedWithCustomError(token, REVERT_ERROR_TRANSFER_EXCEEDED_FROZEN_AMOUNT);
@@ -909,7 +924,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
       await proveTx(token.connect(deployer).premint(user.address, 5, timestamp));
       await proveTx(token.connect(deployer).freeze(user.address, 5));
       await proveTx(token.connect(deployer).updateRestriction(user.address, PURPOSE, 5));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(nonPurposeAccount.address, 25)
       ).to.be.revertedWith(REVERT_MESSAGE_ERC20_TRANSFER_AMOUNT_EXCEEDS_BALANCE);
@@ -1298,12 +1313,12 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
   describe("Premint balance only, no frozen balance or restricted balance", async () => {
     let timestamp: number;
     before(async () => {
-      timestamp = await time.latest() + 100;
+      timestamp = await latest() + 100;
     });
     it("Transfer to purpose account with release awaiting - test 5", async () => {
       const { token } = await setUpFixture(deployAndConfigureToken);
       await proveTx(token.connect(deployer).premint(user.address, 20, timestamp));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(purposeAccount.address, 5)
       ).to.changeTokenBalances(
@@ -1316,7 +1331,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
     it("Transfer to purpose account with release awaiting - test 10", async () => {
       const { token } = await setUpFixture(deployAndConfigureToken);
       await proveTx(token.connect(deployer).premint(user.address, 20, timestamp));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(purposeAccount.address, 10)
       ).to.changeTokenBalances(
@@ -1329,7 +1344,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
     it("Transfer to purpose account with release awaiting - test 15", async () => {
       const { token } = await setUpFixture(deployAndConfigureToken);
       await proveTx(token.connect(deployer).premint(user.address, 20, timestamp));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(purposeAccount.address, 15)
       ).to.changeTokenBalances(
@@ -1342,7 +1357,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
     it("Transfer to purpose account with release awaiting - test 20", async () => {
       const { token } = await setUpFixture(deployAndConfigureToken);
       await proveTx(token.connect(deployer).premint(user.address, 20, timestamp));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(purposeAccount.address, 20)
       ).to.changeTokenBalances(
@@ -1355,7 +1370,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
     it("Transfer to purpose account with release awaiting - test 25", async () => {
       const { token } = await setUpFixture(deployAndConfigureToken);
       await proveTx(token.connect(deployer).premint(user.address, 20, timestamp));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(purposeAccount.address, 25)
       ).to.be.revertedWith(REVERT_MESSAGE_ERC20_TRANSFER_AMOUNT_EXCEEDS_BALANCE);
@@ -1364,7 +1379,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
     it("Transfer to non-purpose account with release awaiting - test 5", async () => {
       const { token } = await setUpFixture(deployAndConfigureToken);
       await proveTx(token.connect(deployer).premint(user.address, 20, timestamp));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(nonPurposeAccount.address, 5)
       ).to.changeTokenBalances(
@@ -1377,7 +1392,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
     it("Transfer to non-purpose account with release awaiting - test 10", async () => {
       const { token } = await setUpFixture(deployAndConfigureToken);
       await proveTx(token.connect(deployer).premint(user.address, 20, timestamp));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(nonPurposeAccount.address, 10)
       ).to.changeTokenBalances(
@@ -1390,7 +1405,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
     it("Transfer to non-purpose account with release awaiting - test 15", async () => {
       const { token } = await setUpFixture(deployAndConfigureToken);
       await proveTx(token.connect(deployer).premint(user.address, 20, timestamp));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(nonPurposeAccount.address, 15)
       ).to.changeTokenBalances(
@@ -1403,7 +1418,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
     it("Transfer to non-purpose account with release awaiting - test 20", async () => {
       const { token } = await setUpFixture(deployAndConfigureToken);
       await proveTx(token.connect(deployer).premint(user.address, 20, timestamp));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(nonPurposeAccount.address, 20)
       ).to.changeTokenBalances(
@@ -1416,7 +1431,7 @@ describe("Contract 'CWToken' - Premintable, Freezable & Restrictable scenarios",
     it("Transfer to non-purpose account with release awaiting - test 25", async () => {
       const { token } = await setUpFixture(deployAndConfigureToken);
       await proveTx(token.connect(deployer).premint(user.address, 20, timestamp));
-      await time.increaseTo(timestamp);
+      await increaseTo(timestamp);
       await expect(
         token.connect(user).transfer(nonPurposeAccount.address, 25)
       ).to.be.revertedWith(REVERT_MESSAGE_ERC20_TRANSFER_AMOUNT_EXCEEDS_BALANCE);
