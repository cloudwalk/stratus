[package]
name = "stratus"
version = "0.20.1"
edition = "2021"
default-run = "stratus"

# ------------------------------------------------------------------------------
# Runtime dependencies
# ------------------------------------------------------------------------------

[dependencies]

# general
anyhow = "=1.0.86"
cfg-if = "=1.0.0"
chrono = { version = "=0.4.38", features = ["serde"] }
const_format = "=0.2.32"
const-hex = "=1.14.0"
derive_more = "=0.99.17"
derive-new = "=0.6.0"
hash_hasher = "=2.0.3"
hex_fmt = "=0.3.0"
hex-literal = "=1.0.0"
humantime = "=2.1.0"
indexmap = { version = "=2.7.1", features = ["serde"] }
itertools = "=0.13.0"
nanoid = "=0.4.0"
nonempty = { version = "=0.10.0", features = ["serialize"] }
oneshot = "=0.1.8"
parking_lot = "=0.12.3"
paste = "=1.0.15"
phf = "=0.11.2"
pin-project = "=1.1.10"
rand = { version = "=0.8.5", features = ["small_rng"] }
rand_core = "=0.6.4"
ring = "=0.17.13"
rust_decimal = "=1.36.0"
rustc-hash = "=2.1.1"
smallvec = "=1.13.2"
static_assertions = "=1.1.0"
strum = { version = "=0.26.2", features = ["derive"] }
quick_cache = "=0.6.9"
sugars = "=3.0.1"
thiserror = "=1.0.61"
uuid = { version = "=1.10.0", features = ["v7"]}
stratus_macros = { path = "./crates/stratus_macros" }

# async
tokio = { version = "=1.45.0", features = [
    "rt-multi-thread",
    "macros",
    "signal",
] }
tokio-util = "=0.7.11"

# config
clap = { version = "=4.5.7", features = ["derive", "env"] }
dotenvy = "=0.15.7"

# serialization
bincode = { version = "=1.3.3" }
display_json = "=0.2.1"
prost-types = "=0.12.6"
serde = "=1.0.203"
serde_json = "=1.0.140"
serde_urlencoded = "=0.7.1"
serde_with = "=3.8.1"

# parallelism
crossbeam-channel = "=0.5.15"
futures = "=0.3.30"
futures-timer = "=3.0.3"
futures-util = "=0.3.31"
futures-channel = "=0.3.31"

# ethereum / rpc
ethabi = "=18.0.0"
ethereum-types = "=0.14.1"
keccak-hasher = "=0.15.3"  # this version must be compatible with triehash
rlp = "=0.5.2"
triehash = "=0.8.4"
revm-inspectors = "=0.21.0"
alloy-rpc-types-trace = "=0.15.11"
alloy-rpc-types-eth = "=0.15.11"
alloy-consensus = { version = "=0.15.11", features = ["k256"] }
alloy-primitives = "=1.1.0"
alloy-eips = "=0.15.11"

# network
jsonrpsee = { version = "=0.25.1", features = ["server", "client"] }
reqwest = { version = "=0.12.4", features = ["json"] }
tonic = "=0.11.0"
tower = "=0.5.0"
tower-http = { version = "=0.5.2", features = ["cors"] }
http = "=1.1.0"
http-body = "=1.0.1"
http-body-util = "=0.1.2"
bytes = "=1.9.0"
openssl = "=0.10.72"

# observability
console-subscriber = "=0.2.0"
log = "=0.4.20"
metrics = "=0.23.0"
metrics-exporter-prometheus = { version = "=0.15.0", optional = true }
opentelemetry = "=0.23.0"
opentelemetry_sdk = { version = "=0.23.0", features = ["rt-tokio"] }
opentelemetry-otlp = { version = "=0.16.0", features = [
    "http-proto",
    "reqwest-client",
    "reqwest-rustls",
    "tls",
    "tls-roots",
] }
sentry = "=0.34.0"
sentry-tracing = "=0.34.0"
tracing = { version = "=0.1.40", features = ["attributes"] }
tracing-opentelemetry = "=0.24.0"
tracing-subscriber = { version = "=0.3.18", features = ["env-filter", "json"] }
tracing-serde = "=0.1.3"

# storage
rocksdb = { version = "=0.23.0", features = ["multi-threaded-cf"] }
sqlx = { version = "=0.8.2", features = [
    "runtime-tokio",
    "postgres",
    "bigdecimal",
    "time",
] }

# test
fake = { version = "=2.9.2", features = ["chrono", "derive"] }
rdkafka = {version = "=0.36.2", features = ["ssl", "sasl"] }
sasl2-sys = { version = "=0.1.22", features = ["vendored"] }

# Historic events processor
indicatif = "=0.17.8"

# ------------------------------------------------------------------------------
# Platform specific dependencies
# ------------------------------------------------------------------------------

[target.'cfg(not(all(target_arch = "aarch64", target_os = "linux")))'.dependencies]
revm = { version = "=23.1.0", features = ["asm-keccak", "serde"] }

[target.'cfg(all(target_arch = "aarch64", target_os = "linux"))'.dependencies]
revm = { version = "=23.1.0", features = ["serde"]}

[target.'cfg(not(target_env = "msvc"))'.dependencies]
tikv-jemallocator = { version = "=0.6", optional = true }

# ------------------------------------------------------------------------------
# Patches
# ------------------------------------------------------------------------------
[patch.crates-io]
console-subscriber = { git = "https://github.com/tokio-rs/console.git", rev = "852a977bab71d0f6ae47c6c5c1c20b8679c9e576" }

# ------------------------------------------------------------------------------
# Dev dependencies
# ------------------------------------------------------------------------------

[dev-dependencies]
serde_plain = "=1.0.2"
tempfile = "=3.10.1"
glob = "=0.3.1"

# ------------------------------------------------------------------------------
# Build dependencies
# ------------------------------------------------------------------------------

[build-dependencies]
const-hex = "=1.14.0"
glob = "=0.3.1"
hostname = "=0.4.0"
nom = "=7.1.3"
phf_codegen = "=0.11.2"
vergen = { version = "=8.2.4", features = [
    "build",
    "cargo",
    "git",
    "gitcl",
    "rustc",
] }

# ------------------------------------------------------------------------------
# Binaries
# ------------------------------------------------------------------------------

[[bin]]
name = "rpc-downloader"
path = "src/bin/rpc_downloader.rs"

[[bin]]
name = "importer-offline"
path = "src/bin/importer_offline.rs"

[[bin]]
name = "historic_events_processor"
path = "src/bin/historic_events_processor.rs"

[[bin]]
name = "data_migration"
path = "src/bin/data_migration.rs"

# ------------------------------------------------------------------------------
# Features
# ------------------------------------------------------------------------------

[features]
default = ["metrics", "tracing"]

# Application is running in develoment mode.
dev = []

# Enable runtime metrics collection.
metrics = ["dep:metrics-exporter-prometheus"]

# Enable runtime rocksdb metrics collection.
rocks_metrics = ["metrics"]

# Enable runtime tracing/spans collection.
tracing = []

# Changes to help us generate our flamegraphs
flamegraph = []

# Use Jemalloc as the global allocator
jemalloc = ["dep:tikv-jemallocator"]

# Use Jemalloc as the global allocator with profiling enabled
jeprof = ["tikv-jemallocator/profiling"]

# ------------------------------------------------------------------------------
# Lints
# ------------------------------------------------------------------------------

[lints.clippy]
clone_on_ref_ptr = "warn"
cloned_instead_of_copied = "warn"
default_trait_access = "warn"
disallowed_names = "warn"
manual_let_else = "warn"
semicolon_if_nothing_returned = "warn"
unused_async = "warn"
unused_self = "warn"
used_underscore_binding = "warn"
wildcard_imports = "warn"
unwrap_used = "allow"
expect_used = "warn"
panic = "warn"


[profile.release]
lto = "fat"
