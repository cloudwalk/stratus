//WARNING changing anything on this file essentially breaks production

syntax = "proto3";

package append_entry;

enum StatusCode {
    OK = 0; // Request was processed successfully. No further action needed.
    ERROR = 1; // General error. Investigate the cause.
    NOT_LEADER = 2; // Node is not the current leader. Retry with the correct leader.
    LEADER_CHANGED = 3; // Leadership has changed. Re-evaluate the leader and retry.
    LOG_MISMATCH = 4; // Log mismatch. Adjust prevLogIndex and prevLogTerm, then resend entries.
    TERM_MISMATCH = 5; // Term mismatch. Leader’s term outdated, step down and initiate a new election.
    RETRY = 6; // Temporary issue. Wait and retry the request.
    APPEND_SUCCESS = 7; // Entry appended successfully. Update commit index.
    APPEND_FAILURE_GENERAL = 8; // General failure. Retry or investigate.
    TERM_OUTDATED = 9; // Leader’s term outdated. Leader should step down.
    STORAGE_ERROR = 10; // Persistent storage error. Handle the error and retry.
    LEADER_COMMIT_INDEX_ADVANCED = 11; // Leader’s commit index advanced. Follower needs to catch up.
    FOLLOWER_IN_CANDIDATE_STATE = 12; // Follower is in candidate state. Leader may need to step down.
    FOLLOWER_IN_LEADER_STATE = 13; // Follower believes it is the leader. Resolve split-brain scenario.
    ENTRY_ALREADY_EXISTS = 14; // Entry already exists. Verify log consistency.
}

message Log {
    string address = 1;
    repeated string topics = 2;
    bytes data = 3;
    uint64 log_index = 4;
    uint64 transaction_log_index = 5;
    bool removed = 6;
}

message TransactionExecutionEntry {
    string hash = 1;
    uint64 nonce = 2;
    bytes value = 3;
    bytes gas_price = 4;
    bytes input = 5;
    uint64 v = 6;
    bytes r = 7;
    bytes s = 8;
    uint64 chain_id = 9;
    bytes result = 10;
    bytes output = 11;
    string from = 12;
    string to = 13;
    string block_hash = 14;
    uint64 block_number = 15;
    uint64 transaction_index = 16;
    repeated Log logs = 17;
    bytes gas = 18;
    bytes receipt_cumulative_gas_used = 19;
    bytes receipt_gas_used = 20;
    bytes receipt_contract_address = 21;
    uint32 receipt_status = 22;
    bytes receipt_logs_bloom = 23;
    bytes receipt_effective_gas_price = 24;
}

message AppendTransactionExecutionsRequest {
    string leader_id = 1;
    uint64 term = 2;
    uint64 prevLogIndex = 3;
    uint64 prevLogTerm = 4;
    repeated TransactionExecutionEntry executions = 5;
}

message AppendTransactionExecutionsResponse {
    StatusCode status = 1;
    string message = 2;
    uint64 last_committed_block_number = 3;
}

//TODO use eth friendly types
message BlockEntry {
    uint64 number = 1;
    string hash = 2;
    string transactions_root = 3;
    string gas_used = 4;
    string gas_limit = 5;
    string bloom = 6;
    uint64 timestamp = 7;
    string parent_hash = 8;
    string author = 9;
    bytes extra_data = 10;
    string miner = 11;
    string difficulty = 12;
    string receipts_root = 13;
    string uncle_hash = 14;
    uint64 size = 15;
    string state_root = 16;
    string total_difficulty = 17;
    string nonce = 18;
    repeated string transaction_hashes = 19;
}

message AppendBlockCommitRequest {
    string leader_id = 1;
    uint64 term = 2;
    uint64 prevLogIndex = 3;
    uint64 prevLogTerm = 4;
    BlockEntry block_entry = 5;
}

message AppendBlockCommitResponse {
    StatusCode status = 1;
    string message = 2;
    uint64 last_committed_block_number = 3;
}

message RequestVoteRequest {
    uint64 term = 1;
    string candidate_id = 2;
    uint64 last_log_index = 3;
    uint64 last_log_term = 4;
}

message RequestVoteResponse {
    uint64 term = 1;
    bool vote_granted = 2;
}

service AppendEntryService {
    rpc AppendTransactionExecutions (AppendTransactionExecutionsRequest) returns (AppendTransactionExecutionsResponse);
    rpc AppendBlockCommit (AppendBlockCommitRequest) returns (AppendBlockCommitResponse);
    rpc RequestVote (RequestVoteRequest) returns (RequestVoteResponse);
}
