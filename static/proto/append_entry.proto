//WARNING changing anything on this file essentially breaks production

syntax = "proto3";

package append_entry;

// Enum to represent status codes
enum StatusCode {
    OK = 0;
    ERROR = 1;
    NOT_LEADER = 2;
    LEADER_CHANGED = 3;
    LOG_MISMATCH = 4;
    TERM_MISMATCH = 5;
    RETRY = 6;
    APPEND_SUCCESS = 7;
    APPEND_FAILURE_GENERAL = 8;
    TERM_OUTDATED = 9;
    STORAGE_ERROR = 10;
    LEADER_COMMIT_INDEX_ADVANCED = 11;
    FOLLOWER_IN_CANDIDATE_STATE = 12;
    FOLLOWER_IN_LEADER_STATE = 13;
    ENTRY_ALREADY_EXISTS = 14;
}

// Log message
message Log {
    string address = 1;
    repeated string topics = 2;
    string data = 3;
    string logIndex = 4;
    string transactionLogIndex = 5;
    bool removed = 6;
}

// Transaction Execution Entry message
message TransactionExecutionEntry {
    // Transaction details
    string hash = 1;
    string nonce = 2;
    string value = 3;
    string gasPrice = 4;
    string input = 5;
    string v = 6;
    string r = 7;
    string s = 8;
    string type = 9;
    string chainId = 10;
    string publicKey = 11;
    string raw = 12;
    string standardV = 13;
    string result = 14;
    string output = 15;
    string from = 16;
    string to = 17;

    // Block and transaction indexing
    string blockHash = 18;
    string blockNumber = 19;
    string transactionHash = 20;
    string transactionIndex = 21;

    // Logs
    repeated Log logs = 22;

    // Gas details
    string gas = 23;
    string receiptCumulativeGasUsed = 24;
    string receiptGasUsed = 25;
    string receiptContractAddress = 26;
    string receiptStatus = 27;
    string receiptLogsBloom = 28;
    string receiptEffectiveGasPrice = 29;
}

// Append Transaction Execution Entry message
message AppendTransactionExecutionsRequest {
    string leader_id = 1;
    uint64 term = 2;
    uint64 prevLogIndex = 3;
    uint64 prevLogTerm = 4;
    repeated TransactionExecutionEntry executions = 5;
}

message AppendTransactionExecutionsResponse {
    StatusCode status = 1;
    string message = 2;
    uint64 last_committed_block_number = 3;
}

// Block Entry message
message BlockEntry {
    uint64 number = 1;
    string hash = 2;
    string transactions_root = 3;
    string gas_used = 4;
    string gas_limit = 5;
    string bloom = 6;
    uint64 timestamp = 7;
    string parent_hash = 8;
    string author = 9;
    bytes extra_data = 10;
    string miner = 11;
    string difficulty = 12;
    string receipts_root = 13;
    string uncle_hash = 14;
    uint64 size = 15;
    string state_root = 16;
    string total_difficulty = 17;
    string nonce = 18;
    repeated string transaction_hashes = 19;
}

// Append Block Commit Entry message
message AppendBlockCommitRequest {
    string leader_id = 1;
    uint64 term = 2;
    uint64 prevLogIndex = 3;
    uint64 prevLogTerm = 4;
    BlockEntry block_entry = 5;
}

message AppendBlockCommitResponse {
    StatusCode status = 1;
    string message = 2;
    uint64 last_committed_block_number = 3;
}

// Request Vote message
message RequestVoteRequest {
    uint64 term = 1;
    string candidate_id = 2;
    uint64 last_log_index = 3;
    uint64 last_log_term = 4;
}

message RequestVoteResponse {
    uint64 term = 1;
    bool vote_granted = 2;
}

// Service definition
service AppendEntryService {
    rpc AppendTransactionExecutions (AppendTransactionExecutionsRequest) returns (AppendTransactionExecutionsResponse);
    rpc AppendBlockCommit (AppendBlockCommitRequest) returns (AppendBlockCommitResponse);
    rpc RequestVote (RequestVoteRequest) returns (RequestVoteResponse);
}
